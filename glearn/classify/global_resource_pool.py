#!/usr/bin/python
# coding=utf-8
import os
import sys
import numpy as np

sys.path.append( os.path.join( os.path.abspath(os.path.dirname(__file__)) , '..'))
from feature_extraction.text import TfidfVectorizer
from feature_selection import chi2

from datasets.load_files import fetch_hierarchy_code_list,fetch_Bunch_datas,fetch_fine_grained_level_datas


# vtr = TfidfVectorizer(sublinear_tf=True, max_df=0.5, stop_words='english')

# vocabulary_pool = dict()

# def size_mb(docs):
#     return sum(len(s.encode('utf-8')) for s in docs) / 1e6
def size_kb(docs):
	return sum(len(s.encode('utf-8')) for s in docs) / 1e3

def fetch_storage_info():
	sample_size_info = dict()
	hierarchy_code_list = fetch_hierarchy_code_list()

	for code in hierarchy_code_list:
		# code = '01.0101'
		multilevel_code = code.split('.')[0]
		data_train = fetch_Bunch_datas(multilevel_code = multilevel_code)
		print multilevel_code,size_kb(data_train.data)
		sample_size_info[multilevel_code] = size_kb(data_train.data)
	return sample_size_info


def divide_into_group():
	sample_size_info = fetch_storage_info()
	print sample_size_info
	

	group_list = list()
	for i in range(5):
		group_list.append(list())
	for (key,value) in sample_size_info.items():
		if value < 1e1:
			group_list[0].append(key)
		elif value < 1e2:
			group_list[1].append(key)
		elif value < 1e3:
			group_list[2].append(key)
		elif value < 1e4:
			group_list[3].append(key)
		else:
			group_list[4].append(key)
	print group_list
	import pdb;pdb.set_trace()	
	group_list = [['54'], 
	['28', '98'], 
	['30', '80', '00', '04', '05', '56', '99', '12', '31', '52', '33', '32'], 
	['22', '58', '02', '03', '01', '06', '07', '08', '09', '29', '24', '26', '27', '20', '21', '11', '10', '13', '15', '14', '17', '16', '19', '18', '23', '51', '50', '53', '57'], 
	['25', '55']]

	# sorted_group_list = list()
	# for i in range(len(group_list)):
	# 	if len(group_list[i]) == 1:
	# 		if i == len(group_list):
	# 			group_list[i-1].extend(group_list[i])
	# 		group_list[i+1].extend(group_list[i])
	# 		group_list[i] = list()
	# 	group_list[i] = sorted(group_list[i])
	# print group_list

def divide_into_secondary_group(group_list=None):
	# secondary_group_list = list()
	# group_list = [['54'], ['28', '98'], ['30', '80', '00', '04', '05', '56', '99', '12', '31', '52', '33', '32'], ['22', '58', '02', '03', '01', '06', '07', '08', '09', '29', '24', '26', '27', '20', '21', '11', '10', '13', '15', '14', '17', '16', '19', '18', '23', '51', '50', '53', '57'], ['25', '55']]
	# for first_type_code_list in group_list:
	# 	for first_type_code in first_type_code_list:
	# 		secondary_group_list.extend(fetch_hierarchy_code_list(multilevel_code=first_type_code))
	# print secondary_group_list
	secondary_group_list = ['5401', '5407', '5417', '5421', '5423', '5427', '5429', '5437', '5441', '5443', 
	'2801', '2803', '2805', '2807', '2809', '2811', '2813', '2817', '2819', '2821', '2823', 
	'9801', '9803', '9805', '9807', '9809', '9811', '9813', '9815', '9817', '9823', '9825', '9827', '9830', '9831', '9832', '9834', '9835', '9836', '9837', '9839', '9841', '9843', '9847', 
	'3001', '3005', '3007', '3009', '3011', '3013', '3021', '3023', '3025', '3031', '3033', '3035', '3039', '3041', 
	'8001', '8003', '8005', '8007', '8009', '8011', '8013', '8015', '8021', '8023', '8025', '8027', '8033', 
	'0000', '0001', '001', '0401', '0403', '0405', '0407', '0409', '0411', '0413', '0415', '0417', '0423', '0427', '0429', 
	'0501', '0503', '0505', '0507', '0509', '0511', '0513', '0515', '0521', '0523', '0525', '0531', '0533', '0535', '5601', '5603', '5605', '5609', '5611', '5613', '5619', '5621', '5623', '5624', '5631', 
	'9901', '9903', '9905', '9907', '9909', '9911', '9913', '9915', '9917', '9919', '9921', '9923', '9925', '9927', '9929', '9931', '9933', '9935', '9939', '9941', '9943', '9944', '9945', 
	'1201', '1203', '1205', '1207', '1209', '1230', '1231', '1233', '1235', '1237', '1241', '1243', '3101', 
	'3103', '3105', '3107', '3109', '3111', '3113', '3115', '5201', '5207', '5209', '5211', '5213', '5221', '5223', '5229', 
	'3301', '3303', '3305', '3307', '3311', '3313', '3321', '3331', '3333', '3335', '3337', '3201', '3202', '3203', '3205', '3207', '3209', '3211', '3213', '3215', '3217', '3219', '3221', '3223', '3225', '3227', '3231', '3233', '3235', '3237', '3239', 
	'2201', '2205', '2207', '2209', '2211', '2215', '2217', '2219', '2221', '2225', '2227', '2229', '2231', '2233', '2235', '2241', '2243', '2245', '2247', '2249', '2251', '2252', '2253', '2255', '2257', '2259', '2261', 
	'5801', '5803', '5805', '5807', '5811', '5819', 
	'0201', '0203', '0205', '0207', '0208', '0209', '0211', '0213', '0215', '0217', '0219', '0221', '0223', '0225', '0227', '0229', '0231', '0233', '0235', 
	'0301', '0303', '0305', '0307', '0309', '0313', '0315', '0317', '0319', '0321', '0323', '0325', '0327', '0341', '0343', '0345', '0351', '0353', '0355', '0357', '0359', '0361', '0363', '0365', '0367', 
	'0101', '0103', '0105', '0107', '0109', '0111', '0113', '0115', '0116', '0117', '0119', '0121', '0123', '0125', '0127', '0129', '0131', '0133', '0135', '0137', '0139', '0141', '0143', '0145', '0147', '0149', '0151', '0155', '0157', '0159', '0161', '0163', '0165', '0167', 
	'0601', '0603', '0605', '0607', '0609', '0611', '0621', '0625', '0641', '0642', '0643', '0651', '0653', '0655', '0657', '0661', '0663', '0665', '0667', '0677', '0679', '0701', '0703', '0705', '0707', '0709', '0711', '0713', '0715', '0723', '0741', '0743', '0745', '0747', '0749', '0751', '0753', '0755', '0757', '0801', '0803', '0805', '0807', '0809', '0811', '0812', '0813', '0815', '0817', '0819', '0820', '0821', '0823', '0831', '0833', '0835', '0837', '0841', '0845', '0901', '0903', '0905', '0907', '0909', '0911', '0913', '0915', '0917', '0921', '0923', '0925', '0927', '0928', '0941', '0947', '0949', '0951', '2901', '2903', '2905', '2907', '2911', '2913', '2917', '2921', '2923', '2927', '2929', '2931', '2933', '2935', '2401', '2403', '2405', '2407', '2409', '2411', '2413', '2415', '2417', '2419', '2423', '2425', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2609', '2611', '2613', '2615', '2617', '2619', '2621', '2623', '2625', '2627', '2701', '2703', '2705', '2707', '2709', '2711', '2713', '2715', '2717', '2719', '2721', '2001', '2003', '2005', '2007', '2011', '2013', '2015', '2017', '2019', '2021', '2023', '2025', '2027', '2029', '2031', '2037', '2039', '2040', '2041', '2043', '2045', '2101', '2103', '2104', '2105', '2106', '2107', '2109', '2111', '2113', '2115', '2117', '2119', '2123', '2125', '2127', '2129', '2131', '2133', '2159', '2161', '2163', '2165', '2167', '2169', '1101', '1103', '1105', '1106', '1107', '1111', '1131', '1141', '1143', '1145', '1151', '1155', '1157', '1159', '1161', '1171', '1001', '1003', '1005', '1007', '1009', '1011', '1013', '1017', '1021', '1023', '1031', '1033', '1035', '1039', '1041', '1043', '1045', '1301', '1303', '1305', '1307', '1309', '1311', '1312', '1313', '1315', '1316', '1317', '1319', '1331', '1333', '1335', '1339', '1341', '1343', '1351', '1353', '1355', '1357', '1359', '1501', '1503', '1505', '1507', '1509', '1511', '1513', '1515', '1521', '1523', '1525', '1531', '1533', '1537', '1539', '1541', '1543', '1401', '1403', '1404', '1405', '1407', '1409', '1411', '1413', '1415', '1417', '1421', '1423', '1425', '1431', '1437', '1439', '1441', '1443', '1445', '1447', '1455', '1457', '1701', '1703', '1705', '1707', '1709', '1711', '1721', '1731', '1733', '1601', '1603', '1605', '1607', '1609', '1611', '1613', '1615', '1617', '1619', '1621', '1623', '1625', '1627', '1628', '1629', '1633', '1635', '1637', '1638', '1641', '1651', '1901', '1903', '1905', '1907', '1909', '1911', '1921', '1923', '1925', '1927', '1929', '1933', '1940', '1941', '1943', '1945', '1947', '1949', '1951', '1953', '1955', '1959', '1961', '1801', '1803', '1805', '1807', '1808', '1809', '1811', '1813', '1815', '1817', '1819', '1821', '1825', '1827', '1829', '1831', '1841', '1843', '1845', '1847', '1849', '1851', '1853', '1855', '1857', '1861', '1863', '1871', '1873', '1875', '1877', '1881', '1883', '2301', '2303', '2305', '2307', '2309', '2311', '2313', '2315', '2317', '2319', '2320', '2321', '2323', '2331', '2333', '2341', '2343', '2345', '2347', '2349', '5101', '5103', '5109', '5111', '5117', '5119', '5129', '5131', '5133', '5135', '5139', '5141', '5001', '5003', '5005', '5007', '5009', '5011', '5013', '5015', '5017', '5025', '5027', '5029', '5031', '5033', '5035', '5037', '5041', '5301', '5305', '5307', '5309', '5311', '5313', '5315', '5317', '5319', '5321', '5323', '5327', '5329', '5330', '5331', '5333', '5337', '5347', '5701', '5703', '5705', '5707', '5709', '5711', '5713', '5715', '5723', '5725', '5727', '5729', '5731', '5735', '5737', '5741', '5745', '2501', '2503', '2505', '2511', '2521', '2523', '2525', '2527', '2529', '2531', '2541', '2543', '5501', '5503', '5505', '5507', '5509', '5513', '5515', '5517', '5519', '5521', '5523', '5525', '5527', '5529', '5531', '5533', '5539', '5541', '5543', '5544', '5545', '5547', '5549']
	
	sample_size_info = dict()
	size_kb_list = list()
	for code in secondary_group_list:
		multilevel_code = code[:2]
		categories = list();categories.append(code)
		data_train = fetch_Bunch_datas(multilevel_code = multilevel_code, categories =categories)
		sample_size_info[code] = size_kb(data_train.data)
		size_kb_list.append(size_kb(data_train.data))
	print sample_size_info
	print size_kb_list
	
	lv1_num = 5
	lv1_size = sum(size_kb_list)
	lv1_indexs = list()

	import pdb;pdb.set_trace()
	# size_kb_index是按的secondary_group_list的kb大小顺序（从小到大）对应的索引顺序
	size_kb_argsort = np.argsort(size_kb_list)


	print size_kb_argsort
	"""[253 744 102 104   0 108  51 103 653  36   4  13  40   3 387  20 116  34
 129 211 138 686 733   1 719 561 670 562 468 548 142  53  32 299  33 659
  91  39 177 171 130 465 467 332  16 656 470 405  73 727  38  29 278 460
 287 166 417 717 732  23 125  70 169 191 323 478 518 107   6 210 510  25
 342 735 721  45 724 184  56 401 290 277 147 153 743   2 126 477   8  21
 742 704  95 391 655 745 170 740 531 596 127 257 572  19   9  18  49 393
 234  64 167  94 294 532 124 215 759 122 473  27  28 718  63 534 774 474
 550 661 180 132 622 389 501 208 336 302 608 119 612 181 388 726  35 185
  26 627   7 121 654 442 149 522 404 678  37 730 486 523 748 351 734  31
  97 517 157 200 383  99 672 679   5  43 615 657 521 667  46 390 469 254
 685 475 683 613 189 725 218 329 520 635 751  67 528 500  47 529 508  98
 186 243 335 241 183 680 650 502  59 658 663 483 484 111 662 160 736  10
 471 182 136 307 174 143 671 305 161 530 117 315 252 312 482  42 187 421
 687  55 614  60 494 709  41 283  77 188 135 591 630  54 722 120 156 676
 190 150 582 623 488 303 205 380 689 716 291 643 406 515 392 720 457 152
 509  11 526 123 750 109 527 173 217 595 639 559 476 163 402 238 137 266
 128 668 333 338 775 698 729 642 703 472 449 265 105 498 158 583 133 570
 118 524 466 148 706  62 101 131 385 222 112 114 707 165  61 660 356 610
 464 609 242 209  65 606 525 322  15 674 273  30 761 316 624 399 204 758
 441 578 233 151 297 495 648 369 140 192 754 371 330 688 284  96 301 271
 354 275 589  24 533 231 665 168 262 636 446 505 691 106 712 592 503 700
 115 598 139 489 282 337 232 535 403  17 416 611 288  68 605 490  85 293
 141 459 372 359 603 426 175 641 203 229 237 752 221 710 360  50 599 384
 331 581 212 292 100 435 295 155 462 201 723 504 145  75 358 429 340 260
 414 576 638 298 651 370 593 350 352 666 714 154 286 178 439 226 279 264
  12 701 513 580 577 274 756 272 250 267 739 422 346 647 289 248 364 699
  72 766 366 223 594  22 255 240  78 428 300 649 431 235 423 328 579 453
 684  57 268 497 779 113 702 496 440 276 400 410 314 620 631 256 757 245
  14 317 728 681 569 443 487 770 134 418 628 396  76 349 280  92  89 777
 202 493 374 244 445 433 341  79 675 543  48 564  83 249 565 176 619 451
  86 220 772 444 737 568 452 206 318 310 618 448 634 251 632 499 690 713
 430 376 767 485 541 408 269 616 755 311 195 574  82 348 557 673 669 313
 481 693  80 308 146 347 553 773  87 542 438  74 715 556 320 365 514 339
 246 427 199 546 259 447 362 646 324 762 637 554 436 398  66 621 198 511
 753 424  52 381 219 353 625 567 696 304  84 765 361 516 419  93  71 306
  90 197  44 164 590 214 379  58 230 455 538 507 382 479 162 375 179  81
 263 327 239 194  69 602 695 536 692 601 413 213 261 258 626 368 228 746
 586 738 397  88 386 415 597 708 144 196 600 326 434 425 633 227 296 537
 159 377 463 216 697 644 319 540 394 224 247 694 549 363 420 544 236 560
 776 270 373 545 617 378 558 345 172 604 458 110 456 309 512 334 571 547
 645 492 607 281 731 454 409 367 432 552 491 437 778 769 555 207 563 357
 450 321 395 519 193 652 225 585 760 640 587 575 461 584 588 768 780 682
 480 763 664 506 285 355 551 711 629 412 343 411 539 325 741 677 573 407
 705 771 764 344 566 747 749]"""

 	size_kb_sorted_list = sorted(size_kb_list) 
 	secondary_group_sorted_list = list()
 	for i in size_kb_argsort:
 		secondary_group_sorted_list.append(secondary_group_list[i])
 	print secondary_group_sorted_list
 	"""
 	['0319', '5741', '5605', '5611', '5401', '5623', '3023', '5609', '1857', '9834', '5423', '2807', '9839', '5421', '2917', '2823', '9911', '9831', '9939', '2247', '1209', '5117', '5709', '5407', '5319', '1415', '2317', '1417', '2123', '1533', '1235', '3031', '9827', '0159', '9830', '1877', '0511', '9837', '3207', '3335', '9941', '2115', '2119', '0715', '2813', '1871', '2127', '2423', '001', '5337', '9836', '9817', '0116', '2106', '0133', '3311', '2615', '5315', '5707', '9805', '9929', '8033', '3331', '3237', '0677', '2167', '1311', '5621', '5429', '2245', '1041', '9809', '0757', '5713', '5323', '3005', '5330', '3221', '3039', '2413', '0139', '0115', '3103', '3115', '5737', '5417', '9931', '2165', '5441', '9801', '5735', '5027', '0523', '2929', '1863', '5745', '3333', '5729', '1351', '1625', '9933', '0327', '1447', '2821', '5443', '2819', '3013', '2933', '0215', '8013', '3313', '0521', '0147', '1353', '9927', '2253', '5503', '9923', '2133', '9813', '9815', '5317', '8011', '1357', '5539', '2159', '1539', '1883', '3213', '9944', '1947', '2923', '1011', '2241', '0745', '0165', '1905', '9917', '1921', '3215', '2921', '5333', '9832', '3223', '9811', '1959', '5437', '9921', '1861', '2017', '3107', '1316', '2419', '2343', '9835', '5703', '1131', '1317', '2505', '0815', '5711', '9825', '0531', '1309', '5211', '2219', '2905', '0535', '2320', '2345', '5427', '9847', '1927', '1873', '1315', '2311', '3007', '2927', '2125', '0321', '5111', '2161', '5103', '1923', '3233', '5331', '2259', '0709', '1313', '1811', '2523', '8023', '1339', '1009', '3009', '1341', '1035', '0533', '3225', '0233', '0743', '0229', '3219', '2347', '1851', '1013', '8003', '1875', '2303', '1106', '1107', '9901', '2301', '5223', '5715', '2801', '2129', '3217', '1205', '0607', '3202', '1237', '2319', '0603', '5229', '1343', '9913', '0651', '0317', '0641', '1105', '9843', '3227', '2623', '5119', '3035', '1925', '8005', '1161', '5037', '9841', '0125', '0407', '3231', '1203', '1615', '1803', '3033', '5327', '9919', '5209', '2333', '3235', '3109', '1731', '1949', '1143', '0167', '2231', '0951', '5131', '5313', '0141', '1829', '2425', '1305', '2931', '5321', '2103', '3113', '1039', '2803', '1333', '9925', '2521', '5624', '1335', '3201', '2257', '1623', '1819', '1411', '2163', '3303', '2415', '0223', '1207', '0361', '9935', '2313', '0723', '0749', '5541', '5009', '5701', '1827', '5025', '2131', '2031', '0359', '5613', '1005', '5213', '1733', '9945', '1443', '9915', '1319', '2117', '3105', '5031', '8009', '5603', '9943', '2911', '5805', '9903', '9907', '5033', '3307', '8007', '1881', '0823', '1909', '2113', '1907', '0231', '2243', '8015', '1901', '1331', '0667', '2811', '2323', '0107', '9823', '5507', '0653', '1951', '2409', '2229', '5501', '2015', '1707', '0213', '3111', '0155', '1171', '1847', '0913', '1231', '3239', '2529', '0917', '0711', '5129', '0127', '0525', '0163', '0103', '0820', '0111', '1611', '9807', '1355', '0209', '2307', '3321', '0353', '1813', '2025', '1023', '5135', '5619', '5305', '1617', '1017', '5013', '9909', '1628', '1230', '1145', '0123', '0747', '0211', '1359', '2417', '2817', '2613', '1911', '0135', '8025', '1651', '1151', '0429', '0145', '1233', '2105', '0921', '0835', '1638', '2705', '3203', '1825', '2227', '0207', '0221', '2525', '5803', '5041', '0837', '3021', '1629', '2907', '0713', '1721', '2249', '0143', '5601', '2001', '0149', '5207', '2109', '2221', '5329', '1021', '1243', '0403', '0833', '2711', '0753', '0345', '2609', '1703', '1817', '0157', '1853', '0915', '1619', '0813', '0817', '2309', '5309', '5201', '0131', '3209', '2011', '0201', '0117', '0357', '2805', '5015', '1301', '1711', '1705', '0109', '2541', '0105', '0313', '0363', '5727', '2625', '0807', '1845', '0137', '0307', '0903', '5011', '0001', '5519', '0907', '5807', '1621', '9803', '0323', '0227', '0409', '2709', '0161', '1849', '2715', '0217', '2627', '0707', '1709', '2041', '5109', '3041', '0365', '1003', '5547', '9905', '5017', '1001', '2013', '0113', '2411', '2604', '0643', '1943', '1805', '0325', '2543', '0301', '2809', '0655', '5347', '2349', '1441', '2019', '1141', '5527', '1201', '2617', '1961', '2403', '0405', '0812', '0119', '0513', '0507', '5544', '2225', '1159', '0925', '0235', '2023', '2719', '0755', '0411', '2331', '1515', '3011', '1423', '0423', '0309', '1425', '3205', '1941', '2039', '0501', '5801', '5531', '2021', '5723', '1439', '2040', '2233', '0657', '0621', '1940', '2029', '1809', '0315', '1807', '1007', '5133', '5307', '2713', '0928', '5521', '1111', '1511', '2602', '0367', '1929', '2531', '0625', '2207', '1457', '0417', '0811', '1407', '2321', '2315', '0642', '1103', '5141', '0413', '0609', '3101', '0809', '1401', '5533', '0503', '1513', '2007', '0401', '5311', '1405', '0663', '0905', '1303', '0751', '0303', '2707', '2217', '1525', '0343', '2027', '0845', '1843', '0679', '5509', '1815', '1403', '2003', '2407', '8021', '1945', '2215', '1043', '2527', '2701', '3025', '2901', '2261', '0819', '1953', '1437', '5005', '0601', '0427', '5517', '0841', '1307', '2619', '0515', '0000', '0605', '0509', '2211', '3001', '3305', '1613', '2252', '0949', '8001', '0208', '2045', '1505', '1033', '2903', '2169', '3301', '0927', '3211', '0415', '0355', '0705', '0225', '2205', '8027', '1637', '5003', '1501', '5139', '1635', '2607', '2251', '0351', '0341', '1955', '0911', '0205', '2501', '1605', '5725', '2405', '0505', '2913', '2611', '1627', '5035', '1241', '2209', '1633', '0703', '2721', '2703', '1808', '0203', '0151', '1503', '5221', '0941', '2111', '2255', '5007', '1831', '0661', '1509', '2935', '5811', '0305', '5001', '1537', '0901', '2621', '1521', '0219', '1413', '5543', '0101', '0923', '1523', '1933', '0947', '1409', '0805', '3337', '1641', '2104', '5631', '2101', '0611', '1045', '0741', '1445', '1531', '1841', '1157', '1903', '0121', '5705', '2043', '2603', '0909', '2717', '1543', '1155', '2005', '5545', '5525', '1404', '2235', '1421', '0831', '2037', '0665', '2401', '1312', '2201', '1855', '5819', '1603', '5505', '1821', '1607', '1701', '2107', '1601', '1609', '5523', '5549', '5101', '1101', '5513', '2305', '1031', '0129', '0821', '1541', '5301', '1801', '2606', '0801', '2605', '1507', '0701', '5731', '2341', '1455', '2601', '5029', '5529', '5515', '0803', '1431', '2503', '2511']"""

 	import pdb;pdb.set_trace()




def main():
	# divide_into_group()
	divide_into_secondary_group()

if __name__ == "__main__":
	main()